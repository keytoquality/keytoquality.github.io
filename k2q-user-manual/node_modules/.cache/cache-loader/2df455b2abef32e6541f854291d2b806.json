{"remainingRequest":"C:\\Users\\higgi\\Documents\\GitHub\\keytoqualitysite\\k2q-user-manual\\node_modules\\babel-loader\\lib\\index.js??ref--7-1!C:\\Users\\higgi\\Documents\\GitHub\\keytoqualitysite\\k2q-user-manual\\node_modules\\@docusaurus\\theme-classic\\lib\\utils\\index.js","dependencies":[{"path":"C:\\Users\\higgi\\Documents\\GitHub\\keytoqualitysite\\k2q-user-manual\\node_modules\\@docusaurus\\theme-classic\\lib\\utils\\index.js","mtime":1603752405793},{"path":"C:\\Users\\higgi\\Documents\\GitHub\\keytoqualitysite\\k2q-user-manual\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1603752393488},{"path":"C:\\Users\\higgi\\Documents\\GitHub\\keytoqualitysite\\k2q-user-manual\\node_modules\\babel-loader\\lib\\index.js","mtime":1603752393398}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqCiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLgogKgogKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGUKICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgogKi8gLy8gQ29tcGFyZSB0aGUgMiBwYXRocywgaWdub3JpbmcgdHJhaWxpbmcgLwpleHBvcnQgY29uc3QgaXNTYW1lUGF0aD0ocGF0aDEscGF0aDIpPT57Y29uc3Qgbm9ybWFsaXplPXN0cj0+c3RyLmVuZHNXaXRoKCcvJyk/c3RyOmAke3N0cn0vYDtyZXR1cm4gbm9ybWFsaXplKHBhdGgxKT09PW5vcm1hbGl6ZShwYXRoMik7fTs="},{"version":3,"sources":["C:/Users/higgi/Documents/GitHub/keytoqualitysite/k2q-user-manual/node_modules/@docusaurus/theme-classic/lib/utils/index.js"],"names":["isSamePath","path1","path2","normalize","str","endsWith"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,G,CACA;AACA,MAAO,MAAMA,CAAAA,UAAU,CAAG,CAACC,KAAD,CAAQC,KAAR,GAAkB,CAC1C,KAAMC,CAAAA,SAAS,CAAIC,GAAD,EAAUA,GAAG,CAACC,QAAJ,CAAa,GAAb,EAAoBD,GAApB,CAA2B,GAAEA,GAAI,GAA7D,CAEA,MAAOD,CAAAA,SAAS,CAACF,KAAD,CAAT,GAAqBE,SAAS,CAACD,KAAD,CAArC,CACD,CAJM","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Compare the 2 paths, ignoring trailing /\nexport const isSamePath = (path1, path2) => {\n  const normalize = (str) => (str.endsWith('/') ? str : `${str}/`);\n\n  return normalize(path1) === normalize(path2);\n};\n"]}]}